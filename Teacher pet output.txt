
if (strengths.trim()) { const strengthText = strengths.split(',')[0].trim(); const strengthSentence = isMaleTeacher ? `${pronoun} consistently demonstrates strong capabilities in ${strengthText.toLowerCase()}.` : `${possessive} wonderful ${strengthText.toLowerCase()} truly shines throughout our activities.`; sentences.push(strengthSentence); } // Subject performance if (subjectData.length > 0) { const topSubjects = subjectData.filter(s => s.rating >= 3).slice(0, 2); if (topSubjects.length > 0) { const subjectNames = topSubjects.map(s => s.name.toLowerCase()).join(' and '); const subjectSentence = isMaleTeacher ? `Academic development in ${subjectNames} ${verb} been particularly noteworthy this term.` : `${pronoun} ${verb} shown wonderful progress in ${subjectNames} with genuine enthusiasm.`; sentences.push(subjectSentence); } } // Specific topic achievements if (topicData.length > 0) { const topTopics = topicData.filter(t => t.rating >= 3).slice(0, 2); if (topTopics.length > 0) { const topicText = topTopics[0].text.substring(0, 30); const topicSentence = isMaleTeacher ? `Notable achievements include mastering ${topicText.toLowerCase()} and related activities.` : `${pronoun} particularly enjoyed ${topicText.toLowerCase()} and similar learning experiences.`; sentences.push(topicSentence); } } // Learning behavior and attitude const behaviorSentences = isMaleTeacher ? [ `${pronoun} maintains ${perf.attitude} throughout classroom activities.`, `${possessive} learning approach demonstrates maturity and focus.`, `${name} shows consistent effort in all educational pursuits.` ] : [ `${name} brings ${perf.attitude} to our classroom every day.`, `${possessive} curiosity and wonder make learning truly special.`, `${pronoun} approach challenges with determination and joy.` ]; sentences.push(behaviorSentences[Math.floor(Math.random() * behaviorSentences.length)]); // Growth areas (if weaknesses provided) if (weaknesses.trim()) { const weaknessText = weaknesses.split(',')[0].trim(); const growthSentence = isMaleTeacher ? `Continued development in ${weaknessText.toLowerCase()} will enhance future academic success.` : `We'll continue nurturing growth in ${weaknessText.toLowerCase()} with supportive guidance.`; sentences.push(growthSentence); } // Additional varied content based on selections const additionalContent = []; if (selectedTopics.length > 3) { additionalContent.push(isMaleTeacher ? `${possessive} engagement across multiple learning areas demonstrates well-rounded development.` : `${name} embraces diverse learning opportunities with genuine excitement and interest.`); } if (subjectData.some(s => s.rating >= 4)) { additionalContent.push(isMaleTeacher ? `${pronoun} consistently meets and often exceeds developmental expectations.` : `${possessive} achievements reflect dedicated effort and natural curiosity.`); } // Social and collaborative aspects const socialSentences = isMaleTeacher ? [ `${pronoun} interacts positively with peers and contributes meaningfully to group activities.`, `${name} demonstrates appropriate social skills and classroom behavior.`, `${possessive} collaborative spirit enhances the learning environment for everyone.` ] : [ `${name} brings kindness and cooperation to all classroom interactions.`, `${pronoun} naturally supports classmates and celebrates others' successes.`, `${possessive} gentle nature creates a positive atmosphere for learning.` ]; additionalContent.push(socialSentences[Math.floor(Math.random() * socialSentences.length)]); // Add additional content sentences.push(...additionalContent.slice(0, 2)); // Conclusion const conclusion = isMaleTeacher ? `${name} ${isAre} well-prepared for continued academic advancement and future learning challenges.` : `${name} ${isAre} ready for wonderful future adventures in learning and discovery.`; sentences.push(conclusion); // Join sentences and ensure proper word count let comment = sentences.join(' '); let words = comment.split(' '); // Adjust to approximately 100 words (95-105 range is acceptable) if (words.length > 105) { words = words.slice(0, 105); } else if (words.length < 95) { // Add meaningful filler without repetition const fillers = isMaleTeacher ? [ `${pronoun} demonstrates consistent academic growth.`, `${possessive} work ethic reflects dedication to learning.`, `${name} approaches tasks with methodical precision.` ] : [ `${name} radiates joy in learning.`, `${possessive} creativity brightens our classroom.`, `${pronoun} inspire others with enthusiasm.` ]; while (words.length < 95 && fillers.length > 0) { const filler = fillers.shift(); words.push(...filler.split(' ')); } words = words.slice(0, 105); // Ensure we don't exceed } let finalComment = words.join(' '); // Ensure proper ending if (!finalComment.endsWith('.') && !finalComment.endsWith('!')) { finalComment = finalComment.replace(/[,;:]$/, '') + '.'; } return finalComment; } function generateComments() { const studentData = JSON.parse(localStorage.getItem('studentData') || '{}'); const subjectData = JSON.parse(localStorage.getItem('selectedSubjectData') || '[]'); const topicData = JSON.parse(localStorage.getItem('selectedTopicData') || '[]'); // Validation - ensure ALL required inputs are present if (!studentData.studentName || !studentData.gender) { alert('Please complete student information first by going back to the previous page.'); return; } if (subjectData.length === 0 && topicData.length === 0) { alert('Please select at least one subject or topic before generating comments.'); return; } // Generate two different comments using ALL user inputs const comment1 = generateComment(studentData, topicData, subjectData, 1); const comment2 = generateComment(studentData, topicData, subjectData, 2); document.getElementById('commentText1').innerHTML = comment1; document.getElementById('commentText2').innerHTML = comment2; // Display word counts const wordCount1 = comment1.split(' ').length; const wordCount2 = comment2.split(' ').length; document.getElementById('wordCount1').textContent = `(${wordCount1} words)`; document.getElementById('wordCount2').textContent = `(${wordCount2} words)`; document.getElementById('generatedComments').style.display = 'block'; document.getElementById('generatedComments').scrollIntoView({ behavior: 'smooth' }); } function toggleSubject(subjectId) { const content = document.getElementById(`content_${subjectId}`); const arrow = document.getElementById(`arrow_${subjectId}`); const checkbox = document.getElementById(`subject_${subjectId}`); // Only allow toggle if checkbox is checked if (checkbox.checked) { content.classList.toggle('active'); arrow.classList.toggle('rotated'); } } function handleSubjectCheck(subjectId) { const checkbox = document.getElementById(`subject_${subjectId}`); const content = document.getElementById(`content_${subjectId}`); const arrow = document.getElementById(`arrow_${subjectId}`); if (checkbox.checked) { // Show dropdown when subject is checked content.classList.add('active'); arrow.classList.add('rotated'); } else { // Hide dropdown and uncheck all topics when subject is unchecked content.classList.remove('active'); arrow.classList.remove('rotated'); // Uncheck all topics in this subject const topicCheckboxes = content.querySelectorAll('.topic-checkbox'); topicCheckboxes.forEach(cb => { cb.checked = false; }); } saveSelections(); } // Load saved selections on page load window.addEventListener('load', loadSelections); // Missing functions for start over and comment selection function startOver() { // Clear all stored data localStorage.clear(); sessionStorage.clear(); // Redirect to the beginning window.location.href = 'Play.html'; } function selectComment(commentNumber) { // Remove selection from other comments document.querySelectorAll('.comment-option').forEach(option => { option.classList.remove('selected'); }); // Select the clicked comment document.getElementById(`comment${commentNumber}`).classList.add('selected'); selectedComment = commentNumber; } function copySelectedComment() { if (!selectedComment) { alert('Please select a comment first by clicking on one of the comment options.'); return; } const commentText = document.getElementById(`commentText${selectedComment}`).innerText; // Copy to clipboard navigator.clipboard.writeText(commentText).then(() => { alert('Comment copied to clipboard!'); }).catch(() => { // Fallback for older browsers const textArea = document.createElement('textarea'); textArea.value = commentText; document.body.appendChild(textArea); textArea.select(); document.execCommand('copy'); document.body.removeChild(textArea); alert('Comment copied to clipboard!'); }); } 